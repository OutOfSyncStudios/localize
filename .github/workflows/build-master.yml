name: Master build

on:
  push:
    branches:
      - master

jobs:
  master-push:
    name: 'Master Build'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        slack-channel: ['build-monitoring']
    steps:
      - name: 'Notify build start'
        uses: voxmedia/github-action-slack-notify-build@v1
        id: slack
        with:
          channel: ${{ matrix.slack-channel }}
          status: STARTED
          color: warning
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: 'Checkout'
        uses: actions/checkout@master

      - name: 'Detect Node Version'
        id: detect-node-version
        shell: bash
        run: |
          if [ -f ./.nvmrc ]; then
            nvmrc=$(cat .nvmrc)
          elif [ -f ./.node-version ]; then
            nvmrc=$(cat .node-version)
          else
            nvmrc=0
          fi
          echo "::set-output name=nvmrc::$nvmrc"

      - name: 'Use Node.js ${{ steps.detect-node-version.outputs.nvmrc }}'
        uses: actions/setup-node@v2
        with:
          always-auth: true
          node-version: '${{ steps.detect-node-version.outputs.nvmrc }}'
          cache: 'npm'

      - name: 'NPM Test'
        shell: bash
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm config set registry https://registry.npmjs.org
          npm config set always-auth true
          sudo mkdir ~/.npm || true
          sudo chown -R $USER:$GROUP ~/.npm || true
          sudo chown -R $USER:$GROUP ~/.config || true
          npm ci
          npm run test      
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          CODACY_PROJECT_TOKEN:  ${{ secrets.CODACY_PROJECT_TOKEN }}

      - name: 'NPM Publish'
        shell: bash
        run: |
          npm run coverage || true
          npm publish || true
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          CODACY_PROJECT_TOKEN:  ${{ secrets.CODACY_PROJECT_TOKEN }}

      - name: Notify slack success
        if: success()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          # Updates existing message from the first step
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: ${{ matrix.slack-channel }}
          status: SUCCESS
          color: good
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - name: Notify slack fail
        if: failure()
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          message_id: ${{ steps.slack.outputs.message_id }}
          channel: ${{ matrix.slack-channel }}
          status: FAILED
          color: danger
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
